#include <iostream>
#include <string>
#include <vector>
#include <map>
typedef std::map<std::string, std::pair<std::string, std::string>> PointMap;
typedef std::pair<std::string, std::string> PointPair;


//Utils (todo auslagern)

void print(PointPair Point)
{
    std::cout << '(' << Point.first << ',' << Point.second << ')';
}

//task related stuff

std::string ReadNextPoint(std::string& Line)
{
    std::string point;
    bool end = false;
    for(int i = 0; i < Line.size(); i++)
    {
        if (std::isalpha(Line[i]))
        {
            if (end)
            {
                Line.erase(0,i);
                return(point);
            }
            point += Line[i];
        }
        else
        {
            end = true;
        }
    }
}

void ReadNextLine(std::string NextLine, PointMap& Map)
{
    std::string Key = ReadNextPoint(NextLine);
    std::string Left = ReadNextPoint(NextLine);
    std::string Right = ReadNextPoint(NextLine);
    PointPair Point {Left, Right};
    Map[Key] = Point;
}

void ReadMap(PointMap& Map)
{
    std::string NextLine;
    while(std::getline(std::cin, NextLine))
    {
        ReadNextLine(NextLine, Map); 
    }
}

std::string TakeNextStep(char Direction, std::string LastPoint, PointMap& Map)
{
    PointPair PossibleNextSteps = Map[LastPoint];
    if (Direction == 'L')
    {
        return(PossibleNextSteps.first);
    }
    else 
    {
        return(PossibleNextSteps.second);
    }
}
    
int CountStepsFollowingDirections(std::string Directions, PointMap& Map)
{
    int Steps = 0;
    char NextDirection;
    std::string LastPoint = "AAA";
    int N = Directions.size();
    for(int i = 0; LastPoint != "ZZZ"; i++)    
    {
        if (i == N)
        {
            i = 0;
        }
        LastPoint = TakeNextStep(Directions[i], LastPoint, Map);
        Steps += 1;
    }
    return(Steps);
}

int main()
{
    std::string Directions;
    std::getline(std::cin, Directions);
    std::string EmptyLine;
    std::getline(std::cin, EmptyLine);
    PointMap Map;
    ReadMap(Map);
    int Steps = 0;
    Steps = CountStepsFollowingDirections(Directions, Map);
    std::cout << "Number of steps used: " << Steps;
    return 0;
}
