#include <iostream>
#include <string>
#include <vector>
#include <map>
typedef std::map<std::string, std::pair<std::string, std::string>> PointMap;
typedef std::pair<std::string, std::string> PointPair;


//Utils (todo auslagern)


//task related stuff

std::string ReadNextPoint(std::string& Line)
{
    std::string point;
    bool end = false;
    for(int i = 0; i < Line.size(); i++)
    {
        if (std::isalpha(Line[i]))
        {
            if (end)
            {
                Line.erase(0,i);
                return(point);
            }
            point += Line[i];
        }
        else
        {
            end = true;
        }
    }
}

void ReadNextLine(std::string NextLine, PointMap& Map)
{
    std::string Key = ReadNextPoint(NextLine);
    std::string Left = ReadNextPoint(NextLine);
    std::string Right = ReadNextPoint(NextLine);
    PointPair Point {Left, Right};
    Map[Key] = Point;
}

void ReadMap(PointMap& Map)
{
    std::string NextLine;
    while(std::getline(std::cin, NextLine))
    {
        ReadNextLine(NextLine, Map); 
    }
}
    


int main()
{
    std::string Directions;
    std::getline(std::cin, Directions);
    std::string EmptyLine;
    std::getline(std::cin, EmptyLine);
    PointMap Map;
    ReadMap(Map);
    return 0;
}
