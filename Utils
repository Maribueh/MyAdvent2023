void print(std::vector<int> const &input)
{
    for (int i = 0; i < input.size(); i++) {
        std::cout << input.at(i) << ' ';
    }
}

void print(std::vector<std::vector<int>>& input)
{
    for (int i = 0; i < input.size(); i++) {
        print(input.at(i));
        std::cout << std::endl;
    }
}

void print(std::vector<bool> const &input)
{
    for (int i = 0; i < input.size(); i++) {
        std::cout << input.at(i) << ' ';
    }
}

int Min(Vint& A)
{
    int min = A.at(0);
    for(int i = 0; i < A.size(); i++)
    {
        min  = std::min(A.at(i), min);
    }
    return(min);

}

int SumArray(Vit begin, Vit end)
{
    int sum = 0;
    for(Vit i = begin; i < end; i++ )
    {
        sum += *i;
    }
    return(sum);
}
void SplitInTwo(std::string StrintToSplit, char Delimiter, std::string& FirstPart, std::string& SecondPart)
{
    std::size_t SplitAt;
    SplitAt = StrintToSplit.find(Delimiter);
    if (SplitAt!=std::string::npos)
    {
        FirstPart = StrintToSplit.substr(0, SplitAt);
        SecondPart = StrintToSplit.substr(SplitAt + 1, StrintToSplit.length());
    }
}

int CharToInt(char Digit)
{
    return(Digit -'0');
}

int AddDigitToNumber(char Digit, int Number)
{
    int RealDigit = CharToInt(Digit);
    Number *= 10;
    Number += RealDigit;
    return(Number);
}

void FillVectorFromNumberString(std::string NumberString, Vint& A)
{
    NumberString += ' ';
    int Number = 0;
    bool LastWasADigit = false;
    for(int i = 0; i < NumberString.length(); i++)
    {
        char next = NumberString[i];
        
        if (std::isdigit(next))
        {
            Number = AddDigitToNumber(next, Number);
            LastWasADigit = true;
        }
        else
        {
            if (LastWasADigit)
            {
                A.push_back(Number);
            }
            Number = 0;
            LastWasADigit = false;

void ReadNumbersInNextLine(Vint& Numbers)
{
    std::string NextLine;
    std::getline(std::cin, NextLine);
    FillVectorFromNumberString(NextLine, Numbers);
}

        }
    }
}
