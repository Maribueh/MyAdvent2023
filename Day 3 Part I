#include <iostream>
#include <string>
#include <vector>

typedef std::vector<bool> Vbool;
typedef std::vector<bool>:: iterator Vit;

void print(std::vector<int> const &input)
{
    for (int i = 0; i < input.size(); i++) {
        std::cout << input.at(i) << ' ';
    }
}

void print(std::vector<bool> const &input)
{
    for (int i = 0; i < input.size(); i++) {
        std::cout << input.at(i) << ' ';
    }
}

void AddDigitToNumbers(char Digit, std::vector<int>& Numbers, bool LastWasADigit)
{
    int RealDigit; 
    RealDigit = (Digit -'0');
    if (LastWasADigit) 
    {
        *(Numbers.end() -1 ) *= 10;
        *(Numbers.end() -1 ) += RealDigit;
    }
    else
    {
        Numbers.push_back(RealDigit);
    }
    
}

void FillNumbers(std::string EngineSchematic, std::vector<int>& Numbers)
{
    bool LastWasADigit = false;
    for(int i = 0; i < EngineSchematic.size(); i++)
    {
        if (std::isdigit(EngineSchematic[i]))
        {
            AddDigitToNumbers(EngineSchematic[i], Numbers, LastWasADigit);
            LastWasADigit = true;
        }
        else
        {
            LastWasADigit = false;
        }
    }
    
}

bool IsSymbol(char c)
{
    return(not (std::isdigit(c) || std::isalpha(c) || c == '.'));
}

void FillIsSymbolAfter(std::string EngineSchematic, Vbool& IsSymbolAfter)
{
    for(int i = 0; i < EngineSchematic.size(); i++)
    {
        IsSymbolAfter.at(i) = IsSymbol(EngineSchematic[i]);
    }
}

void PrepareSymbolLines(std::string EngineSchematic, Vbool& IsSymbolBefore, Vbool& IsSymbolNow, Vbool& IsSymbolAfter)
{
    IsSymbolBefore = IsSymbolNow;
    IsSymbolNow = IsSymbolAfter;
    FillIsSymbolAfter(EngineSchematic, IsSymbolAfter);
}

bool CalculateDigitCounts(int DigitPosition, Vbool& IsSymbolBefore, Vbool& IsSymbolNow, Vbool& IsSymbolAfter)
{
    bool result;
    int i = DigitPosition;
    result = IsSymbolBefore.at(i -1) || IsSymbolBefore.at(i) || IsSymbolBefore.at(i+1);
    result = result || IsSymbolNow.at(i-1) || IsSymbolNow.at(i +1);
    result = result || IsSymbolAfter.at(i-1) || IsSymbolAfter.at(i) || IsSymbolAfter.at(i+1);
    return(result);
}

void CalculateNumberCounts(std::string EngineSchematic, Vbool& IsSymbolBefore, Vbool& IsSymbolNow, Vbool& IsSymbolAfter, Vbool& NumberCounts)
{
    bool LastWasADigit = false;
    for(int i = 1; i < EngineSchematic.size() -1; i++) // EngineSchematic is padded
    {
        //std::cout << EngineSchematic[i] << ": " << CalculateDigitCounts(i, IsSymbolBefore, IsSymbolNow, IsSymbolAfter) << ", ";
        if (std::isdigit(EngineSchematic[i]))
        {
            bool DigitCounts = CalculateDigitCounts(i, IsSymbolBefore, IsSymbolNow, IsSymbolAfter);
            if (LastWasADigit) 
            {
                *(NumberCounts.end() -1 ) = *(NumberCounts.end() -1 ) || DigitCounts;
            }
            else
            {
                NumberCounts.push_back(DigitCounts);
            }
            LastWasADigit = true;
        }
        else
        {
            LastWasADigit = false;
        }
    }
}


std::string PadLine(std::string Line)
{
    return("." + Line + ".");
}

int main()
{
    std::vector<int> Numbers;
    Vbool NumberCounts;
    std::string EngineSchematic;
    std::string EngineSchematicBefore;
    
    //get first Line
    std::getline(std::cin, EngineSchematic);
    EngineSchematic = PadLine(EngineSchematic);
    //std::cout << "Line: " << EngineSchematic << std::endl;
    int N = EngineSchematic.size();
    Vbool IsSymbolBefore (N, false);
    Vbool IsSymbolNow (N, false);
    Vbool IsSymbolAfter (N, false);
    
    //treat first Line
    FillNumbers(EngineSchematic, Numbers);
    PrepareSymbolLines(EngineSchematic, IsSymbolBefore, IsSymbolNow, IsSymbolAfter);
    EngineSchematicBefore = EngineSchematic;
    
    
    while(std::getline(std::cin, EngineSchematic))
    {
        EngineSchematic = PadLine(EngineSchematic);
        //std::cout << "Line: " << EngineSchematic << std::endl;
        FillNumbers(EngineSchematic, Numbers);
        PrepareSymbolLines(EngineSchematic, IsSymbolBefore, IsSymbolNow, IsSymbolAfter);
        CalculateNumberCounts(EngineSchematicBefore, IsSymbolBefore, IsSymbolNow, IsSymbolAfter, NumberCounts);
        EngineSchematicBefore = EngineSchematic;
    }
    IsSymbolBefore = IsSymbolNow;
    IsSymbolNow = IsSymbolAfter;
    std::fill(IsSymbolAfter.begin(), IsSymbolAfter.end(), false);
    CalculateNumberCounts(EngineSchematic, IsSymbolBefore, IsSymbolNow, IsSymbolAfter, NumberCounts);
    
    int sum = 0;
    for(int i = 0; i < NumberCounts.size(); i++)
    {
        if (NumberCounts.at(i))
        {
            sum += Numbers.at(i);
        }
    }
    
    std::cout << "sum: " << sum;
    
    return 0;
}
