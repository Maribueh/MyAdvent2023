#include <iostream>
#include <string>
#include <vector>
typedef std::vector<int> Vint;
typedef std::vector <std::vector<int>> Vintint;
typedef std::vector<int>:: iterator Vit;

//Utils (todo auslagern)
void print(Vint const &input)
{
    for (int i = 0; i < input.size(); i++) {
        std::cout << input.at(i) << ' ';
    }
}

void print(std::vector<std::vector<int>>& input)
{
    for (int i = 0; i < input.size(); i++) {
        print(input.at(i));
        std::cout << std::endl;
    }
}

int CharToInt(char Digit)
{
    return(Digit -'0');
}

int AddDigitToNumber(char Digit, int Number)
{
    int RealDigit = CharToInt(Digit);
    Number *= 10;
    Number += RealDigit;
    return(Number);
}

void FillVectorFromNumberString(std::string NumberString, Vint& A)
{
    NumberString += ' ';
    int Number = 0;
    bool LastWasADigit = false;
    for(int i = 0; i < NumberString.length(); i++)
    {
        char next = NumberString[i];
        
        if (std::isdigit(next))
        {
            Number = AddDigitToNumber(next, Number);
            LastWasADigit = true;
        }
        else
        {
            if (LastWasADigit)
            {
                A.push_back(Number);
            }
            Number = 0;
            LastWasADigit = false;

        }
    }
}

//task related stuff
void ReedSeeds(Vint& Seeds)
{
    std::string SeedString;
    std::getline(std::cin, SeedString);
    FillVectorFromNumberString(SeedString, Seeds);
    std::string EmptyLine;
    std::getline(std::cin, EmptyLine);
}

void ReadMap(Vintint& Map)
{
    std::string MapString;
    std::getline(std::cin, MapString);
    while(std::getline(std::cin, MapString))
    {
        if (not std::isdigit(MapString[0])) {break;};
        Vint MapLine;
        FillVectorFromNumberString(MapString, MapLine);
        Map.push_back(MapLine);
    }
}

int main()
{
    Vint Seeds;
    ReedSeeds(Seeds);
    Vintint Map;
    ReadMap(Map);
    print(Map);
    Vint LocationNumbers;
    return 0;
}
